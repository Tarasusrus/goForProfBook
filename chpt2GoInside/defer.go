package main

import "fmt"

// d1 выводит числа в обратном порядке с использованием defer в цикле.
func d1() {
	for i := 4; i > 0; i-- {
		defer fmt.Print(i, " ")  // defer откладывает выполнение fmt.Print до выхода из функции.
	}
}

// d2 также пытается вывести числа в обратном порядке, но использует анонимную функцию.
func d2() {
	for i := 3; i > 0; i-- {
		defer func() {
			fmt.Print(i, " ")  // Здесь 'i' захвачено замыканием и имеет одно и то же значение при каждом вызове.
		}()
	}
	fmt.Println()  // Добавляет перевод строки после завершения цикла.
}

// d3 исправляет поведение d2, передавая 'i' как аргумент функции.
func d3() {
	for i := 3; i > 0; i-- {
		defer func(n int) {
			fmt.Print(n, " ")  // 'n' является копией значения 'i' для каждой итерации цикла.
		}(i)  // 'i' передается в функцию.
	}
}

func main() {
	d1()
	d2()
	fmt.Println()
	d3()
	fmt.Println()
}
